package pages

import (
	"fmt"
	"github.com/axzilla/deeploy/internal/forms"
	"github.com/axzilla/deeploy/internal/ui/layouts"
	"github.com/axzilla/templui/pkg/components"
)

var registerURL = ""

templ Register(errs forms.RegisterErrors, form forms.RegisterForm, isCLI bool, port string) {
	if !isCLI && port == "" {
		{{ registerURL = "/register" }}
	} else {
		{{ registerURL = fmt.Sprintf("/register?cli=%v&port=%s", isCLI, port) }}
	}
	@layouts.AuthLayout() {
		<div class="w-full flex flex-col justify-center items-center gap-4">
			<a href="/">
				<p class="font-extrabold text-xl">
					ðŸ”¥ deeploy.sh
				</p>
			</a>
			<div class="max-w-sm w-full">
				@components.Card(components.CardProps{}) {
					@components.CardHeader() {
						@components.CardTitle() {
							Sign Up
						}
						@components.CardDescription() {
							Sign up to access all the features
						}
					}
					<form
						action={ templ.SafeURL(registerURL) }
						method="POST"
					>
						@components.CardContent() {
							<div class="space-y-4">
								@components.FormItem(components.FormItemProps{}) {
									@components.FormLabel(components.FormLabelProps{
										Text: "Email",
									})
									@components.Input(components.InputProps{
										Name:        "email",
										Type:        "email",
										Placeholder: "Enter email",
										HasError:    errs.Email != "",
										Value:       form.Email,
									})
									if errs.Email != "" {
										@components.FormMessage(components.FormMessageProps{
											Type:    "error",
											Message: errs.Email,
										})
									}
								}
								@components.FormItem(components.FormItemProps{}) {
									@components.FormLabel(components.FormLabelProps{
										Text: "Password",
									})
									@components.Input(components.InputProps{
										Name:        "password",
										Type:        "password",
										Placeholder: "Enter password",
										HasError:    errs.Password != "",
									})
									if errs.Password!= "" {
										@components.FormMessage(components.FormMessageProps{
											Type:    "error",
											Message: errs.Password,
										})
									}
								}
								@components.FormItem(components.FormItemProps{}) {
									@components.FormLabel(components.FormLabelProps{
										Text: "Confirm Password",
									})
									@components.Input(components.InputProps{
										Name:        "passwordConfirm",
										Type:        "password",
										Placeholder: "Confirm password",
										HasError:    errs.PasswordConfirm != "",
									})
									if errs.PasswordConfirm != "" {
										@components.FormMessage(components.FormMessageProps{
											Type:    "error",
											Message: errs.PasswordConfirm,
										})
									}
								}
							</div>
						}
						@components.CardFooter() {
							<div class="flex flex-col gap-4 w-full">
								@components.Button(components.ButtonProps{
									Type: "submit",
									Text: "Sign Up",
								})
							</div>
						}
					</form>
				}
				if errs.General != "" {
					@components.Toast(components.ToastProps{
						Message:     errs.General,
						Type:        "error",
						Icon:        true,
						Dismissible: true,
						Duration:    5000,
					})
				}
			</div>
		</div>
	}
}
